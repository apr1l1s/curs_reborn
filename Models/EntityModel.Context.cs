//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace curs_reborn.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class curs_databaseEntities : DbContext
    {
        public curs_databaseEntities()
            : base("name=curs_databaseEntitiesD")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<document> documents { get; set; }
        public virtual DbSet<grant> grants { get; set; }
        public virtual DbSet<group> groups { get; set; }
        public virtual DbSet<history> histories { get; set; }
        public virtual DbSet<mark> marks { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<subject> subjects { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        [DbFunction("curs_databaseEntities", "getBestStudentsID")]
        public virtual IQueryable<getBestStudentsID_Result> getBestStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getBestStudentsID_Result>("[curs_databaseEntities].[getBestStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "getNormalStudentsID")]
        public virtual IQueryable<getNormalStudentsID_Result> getNormalStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNormalStudentsID_Result>("[curs_databaseEntities].[getNormalStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "getSocialStudentsID")]
        public virtual IQueryable<getSocialStudentsID_Result> getSocialStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getSocialStudentsID_Result>("[curs_databaseEntities].[getSocialStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "selectStatement")]
        public virtual IQueryable<selectStatement_Result> selectStatement(Nullable<int> term, string academ_year, string group_title)
        {
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var group_titleParameter = group_title != null ?
                new ObjectParameter("group_title", group_title) :
                new ObjectParameter("group_title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<selectStatement_Result>("[curs_databaseEntities].[selectStatement](@term, @academ_year, @group_title)", termParameter, academ_yearParameter, group_titleParameter);
        }
    
        public virtual int fillStatement(Nullable<int> term, string academ_year)
        {
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fillStatement", termParameter, academ_yearParameter);
        }
    }
}
