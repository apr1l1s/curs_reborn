//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace curs_reborn.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class curs_databaseEntities : DbContext
    {
        public curs_databaseEntities()
            : base("name=curs_databaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<document> documents { get; set; }
        public virtual DbSet<grant> grants { get; set; }
        public virtual DbSet<group> groups { get; set; }
        public virtual DbSet<history> histories { get; set; }
        public virtual DbSet<mark> marks { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<subject> subjects { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        [DbFunction("curs_databaseEntities", "getBestStudentsID")]
        public virtual IQueryable<getBestStudentsID_Result> getBestStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getBestStudentsID_Result>("[curs_databaseEntities].[getBestStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "getNormalStudentsID")]
        public virtual IQueryable<getNormalStudentsID_Result> getNormalStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getNormalStudentsID_Result>("[curs_databaseEntities].[getNormalStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "getSocialStudentsID")]
        public virtual IQueryable<getSocialStudentsID_Result> getSocialStudentsID(string academ_year, Nullable<int> term)
        {
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getSocialStudentsID_Result>("[curs_databaseEntities].[getSocialStudentsID](@academ_year, @term)", academ_yearParameter, termParameter);
        }
    
        [DbFunction("curs_databaseEntities", "selectStatement")]
        public virtual IQueryable<selectStatement_Result> selectStatement(Nullable<int> term, string academ_year, string group_title)
        {
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            var group_titleParameter = group_title != null ?
                new ObjectParameter("group_title", group_title) :
                new ObjectParameter("group_title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<selectStatement_Result>("[curs_databaseEntities].[selectStatement](@term, @academ_year, @group_title)", termParameter, academ_yearParameter, group_titleParameter);
        }
    
        public virtual int fillStatement(Nullable<int> term, string academ_year)
        {
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fillStatement", termParameter, academ_yearParameter);
        }
    
        public virtual int addUser(string login, string pass, Nullable<int> access_level)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var access_levelParameter = access_level.HasValue ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUser", loginParameter, passParameter, access_levelParameter);
        }
    
        public virtual int delUser(Nullable<int> user_id)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delUser", user_idParameter);
        }
    
        public virtual int editUser(Nullable<int> user_id, string login, string pass, Nullable<int> access_level)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var access_levelParameter = access_level.HasValue ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editUser", user_idParameter, loginParameter, passParameter, access_levelParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int addGroup(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addGroup", titleParameter);
        }
    
        public virtual int delGroup(Nullable<int> group_id)
        {
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delGroup", group_idParameter);
        }
    
        public virtual int editGroup(Nullable<int> group_id, string title)
        {
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editGroup", group_idParameter, titleParameter);
        }
    
        public virtual int addSubject(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSubject", titleParameter);
        }
    
        public virtual int delSubject(Nullable<int> subject_id)
        {
            var subject_idParameter = subject_id.HasValue ?
                new ObjectParameter("subject_id", subject_id) :
                new ObjectParameter("subject_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delSubject", subject_idParameter);
        }
    
        public virtual int editSubject(Nullable<int> subject_id, string title)
        {
            var subject_idParameter = subject_id.HasValue ?
                new ObjectParameter("subject_id", subject_id) :
                new ObjectParameter("subject_id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editSubject", subject_idParameter, titleParameter);
        }
    
        public virtual int addGrant(string type, Nullable<decimal> cost, Nullable<int> term, string academ_year)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addGrant", typeParameter, costParameter, termParameter, academ_yearParameter);
        }
    
        public virtual int delGrant(Nullable<int> grant_id)
        {
            var grant_idParameter = grant_id.HasValue ?
                new ObjectParameter("grant_id", grant_id) :
                new ObjectParameter("grant_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delGrant", grant_idParameter);
        }
    
        public virtual int editGrant(Nullable<int> grant_id, string type, Nullable<decimal> cost, Nullable<int> term, string academ_year)
        {
            var grant_idParameter = grant_id.HasValue ?
                new ObjectParameter("grant_id", grant_id) :
                new ObjectParameter("grant_id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var academ_yearParameter = academ_year != null ?
                new ObjectParameter("academ_year", academ_year) :
                new ObjectParameter("academ_year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editGrant", grant_idParameter, typeParameter, costParameter, termParameter, academ_yearParameter);
        }
    }
}
